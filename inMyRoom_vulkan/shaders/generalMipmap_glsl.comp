#version 450

layout( local_size_x = 4, local_size_y = 4 ) in;

layout( set = 0, binding = 0) uniform sampler2D inTexture;

#ifdef IS_R
layout( set = 1, binding = 0, r16f) uniform image2D outImage;
#endif
#ifdef IS_RG
layout( set = 1, binding = 0, rg16f) uniform image2D outImage;
#endif
#ifdef IS_RGBA
layout( set = 1, binding = 0, rgba16f) uniform image2D outImage;
#endif

void main()
{
    vec2 inTextureSize = textureSize(inTexture, 0);
    vec2 outImageSize = imageSize(outImage);
    
    float ratio = inTextureSize.x / outImageSize.x;
    
    vec2 position_center_normalized = vec2((float(gl_GlobalInvocationID.x) + 0.5f) / float(outImageSize.x),
										   (float(gl_GlobalInvocationID.y) + 0.5f) / float(outImageSize.y));
										   
	float x_delta = 0.5f / inTextureSize.x;
    float y_delta = 0.5f / inTextureSize.y;
                                    
    vec4 ru_sample = texture( inTexture, position_center_normalized + vec2( x_delta,  y_delta)).rgba;
	vec4 lu_sample = texture( inTexture, position_center_normalized + vec2(-x_delta,  y_delta)).rgba;
   	vec4 rd_sample = texture( inTexture, position_center_normalized + vec2( x_delta, -y_delta)).rgba;
	vec4 ld_sample = texture( inTexture, position_center_normalized + vec2(-x_delta, -y_delta)).rgba;
	
	float gravity_sum = ru_sample.a + lu_sample.a + rd_sample.a + ld_sample.a;
	
	vec4 final_texel_color = vec4(0.f, 0.f, 0.f, 0.f);
	if(gravity_sum > 0.00001f)
	{
		final_texel_color += ru_sample * ru_sample.a;
		final_texel_color += lu_sample * lu_sample.a;
		final_texel_color += rd_sample * rd_sample.a;
		final_texel_color += ld_sample * ld_sample.a;
		final_texel_color /= gravity_sum;
	}
	else
	{
		final_texel_color += ru_sample;
		final_texel_color += lu_sample;
		final_texel_color += rd_sample;
		final_texel_color += ld_sample;
		final_texel_color /= 4.f;
	}
	
    imageStore( outImage, ivec2(gl_GlobalInvocationID.xy), final_texel_color);
    
}