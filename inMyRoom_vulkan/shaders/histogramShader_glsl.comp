#version 460

#extension GL_KHR_shader_subgroup_arithmetic: require

#include "common/structs/Histogram.h"
#include "common/luminance.glsl"

layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

// Descriptos

layout (set = 0, binding = 0) buffer histogramBuffer {
    Histogram histogram;
};

#ifdef MULTISAMPLED_INPUT
layout (set = 0, binding = 1, rgba32f) uniform readonly image2DMS image_input;
#else
layout (set = 0, binding = 1, rgba32f) uniform readonly image2D image_input;
#endif

// Shared
shared Histogram local_histograms[LOCAL_SIZE_X/WAVE_SIZE];

// Push constants

layout (push_constant) uniform PushConstants
{
    uint size_x;
    uint size_y;
    uint framesCount;

    float min_luminance_log2;
    float max_luminance_log2;
};


void main()
{
    uint frameIndex = framesCount - 1;

    uint subgroups = LOCAL_SIZE_X / WAVE_SIZE;
    uint subgroup_id = gl_LocalInvocationID.x / WAVE_SIZE;
    uint subgroup_invocation_id = gl_LocalInvocationID.x - subgroup_id * WAVE_SIZE;

    Histogram this_histogram;
    // Init histogram
    for (uint i = 0; i != HISTOGRAM_BUCKETS_COUNT; ++i) {
        this_histogram.buckets[i] = 0.f;
    }

    // Per invocation histogram
    float luminance_log2_range = max_luminance_log2 - min_luminance_log2;
    float inv_luminance_log2_range = 1.f / luminance_log2_range;
    for (uint y = subgroup_id; y < size_y; y += subgroups) {
        for (uint x = subgroup_invocation_id; x < size_x; x += WAVE_SIZE) {
            ivec2 coords = ivec2(x, y);

            vec3 rgb_values = vec3(0.f);
            #ifdef MULTISAMPLED_INPUT
                uint max_samples_points = min(MULTISAMPLED_INPUT, framesCount);
                for (int i = 0; i != max_samples_points; ++i) {
                    vec4 in_color = imageLoad(image_input, coords, i);

                    uint complete_cycles = frameIndex / MULTISAMPLED_INPUT;
                    uint cycle_modulo = frameIndex % MULTISAMPLED_INPUT;

                    uint evals_count = complete_cycles + ((i <= cycle_modulo)? 1 : 0);
                    float this_frameCountFactor = 1.f / float(evals_count);

                    #ifdef CHECK_ALPHA
                        float alpha = in_color.a;
                        if (alpha == 1.f) {
                            rgb_values += in_color.xyz;
                        } else {
                            rgb_values += this_frameCountFactor * in_color.xyz;
                        }
                    #else
                        rgb_values += this_frameCountFactor * in_color.xyz;
                    #endif
                }
                rgb_values /= float(max_samples_points);
            #else
                float frameCountFactor = 1.f / float(framesCount);
                vec4 in_color = imageLoad(image_input, coords);
                #ifdef CHECK_ALPHA
                    float alpha = in_color.a;
                    if (alpha == 1.f) {
                        rgb_values = in_color.xyz;
                    } else {
                        rgb_values = frameCountFactor * in_color.xyz;
                    }
                #else
                    rgb_values = frameCountFactor * in_color.xyz;
                #endif
            #endif

            float luminance = Luminance(rgb_values);

            float max_value_log2 = log2(luminance);

            float interpolation_value = (max_value_log2 - min_luminance_log2) * inv_luminance_log2_range;

            int bucket_index_unbound = int(round(float(HISTOGRAM_BUCKETS_COUNT - 1) * interpolation_value));
            uint bucket_index = max(bucket_index_unbound, 0);
            bucket_index = min(bucket_index, HISTOGRAM_BUCKETS_COUNT - 1);

            this_histogram.buckets[bucket_index] += 1.f;
        }
    }

    // Per subgroup histogram
    for (uint i = 0; i != HISTOGRAM_BUCKETS_COUNT; ++i) {
        float subgroup_sum = subgroupAdd(this_histogram.buckets[i]);
        if (subgroupElect()) {
            local_histograms[subgroup_id].buckets[i] = subgroup_sum;
        }
    }

    // --- Barrier ---
    barrier();

    // Per group histogram
    if (gl_LocalInvocationID.x < HISTOGRAM_BUCKETS_COUNT) {
        float bucket_sum = 0.f;
        for (uint i = 0; i != subgroups; ++i) {
            bucket_sum += local_histograms[i].buckets[gl_LocalInvocationID.x];
        }
        histogram.buckets[gl_LocalInvocationID.x] = bucket_sum;
    }
}
